package testingsteve;

import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.event.ActionListener;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.prefs.Preferences;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.text.BadLocationException;

/**
 *
 * @author Steve
 */
public class Wisard extends javax.swing.JFrame implements UserInterface {
//Web Internal Structure Action RecorDer

    private ImageIcon icon;
    private final javax.swing.table.DefaultTableModel jTable1Model;
    private final JPopupMenu popup;
    private final BrowserDriver bd = new BrowserDriver(this);
    private final Preferences prefs;

    /**
     * Creates new form Wisard
     */
    public Wisard() {
        URL iconURL = getClass().getResource("wisard.png");
        icon = new ImageIcon(iconURL);

        //create the tablemodel for the element table
        jTable1Model = new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Element", "Location", "Name", "id", "Value", "webElement"
                }) {
                    boolean[] canEdit = new boolean[]{
                        false, false, false, false, false, false
                    };

                    @Override
                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit[columnIndex];
                    }
                };

        initComponents();

        //create the popum menu for the element table
        popup = new JPopupMenu();
        MouseListener popupListener = new EventListener(popup, elementsTable, bd);

        JMenuItem menuItem = new JMenuItem(Const.CLICK);
        menuItem.addActionListener((ActionListener) popupListener);
        popup.add(menuItem);
        menuItem = new JMenuItem(Const.FIND);
        menuItem.addActionListener((ActionListener) popupListener);
        popup.add(menuItem);
        menuItem = new JMenuItem(Const.VERIFY);
        menuItem.addActionListener((ActionListener) popupListener);
        popup.add(menuItem);
        menuItem = new JMenuItem(Const.ASSERT);
        menuItem.addActionListener((ActionListener) popupListener);
        popup.add(menuItem);
        menuItem = new JMenuItem(Const.IDENTIFY);
        menuItem.addActionListener((ActionListener) popupListener);
        popup.add(menuItem);
        elementsTable.addMouseListener(popupListener);
        //hide the webElements
        elementsTable.removeColumn(elementsTable.getColumn("webElement"));

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent event) {
                exitProcedure();
            }
        });

        //get prefs
        prefs = Preferences.userRoot().node("wisard");
        if (prefs.get("browser", "").contentEquals("")) {
            //System.out.println("no prefs, writing defaults");
            prefs.put("browser", "FF");
            prefs.put("driverCR", "./chromedriver.exe");
            prefs.put("driverIE", "./IEDriverServer.exe");
            prefs.putBoolean("showId", false);
            prefs.putBoolean("showInvis", false);
            prefs.put("defaultURL", "http://www.google.com");
        }
        pathCR.setText(prefs.get("driverCR", ""));
        pathIE.setText(prefs.get("driverIE", ""));
        defaultURL.setText(prefs.get("defaultURL", ""));
        urlTextField.setText(prefs.get("defaultURL", ""));
        if (prefs.get("browser", "").contentEquals("FF")) {
            buttonFF.setSelected(true);
        }
        if (prefs.get("browser", "").contentEquals("CR")) {
            buttonCR.setSelected(true);
        }
        if (prefs.get("browser", "").contentEquals("IE")) {
            buttonIE.setSelected(true);
        }
        if (prefs.getBoolean("showId", false)) {
            checkBoxId.setSelected(true);
        } else {
            //hide id column
            elementsTable.removeColumn(elementsTable.getColumn("id"));
        }
        if (prefs.getBoolean("showInvis", false)) {
            checkBoxInvis.setSelected(true);
        }

    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        elementsTable = new javax.swing.JTable();
        elementsTable.getTableHeader().setReorderingAllowed(false);
        jToolBar1 = new javax.swing.JToolBar();
        urlLabel = new javax.swing.JLabel();
        urlTextField = new javax.swing.JTextField();
        inspectButton = new javax.swing.JToggleButton();
        refreshButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        codeTextArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        driverLabel = new javax.swing.JLabel();
        builtinLabel = new javax.swing.JLabel();
        buttonFF = new javax.swing.JRadioButton();
        buttonCR = new javax.swing.JRadioButton();
        buttonIE = new javax.swing.JRadioButton();
        pathCR = new javax.swing.JTextField();
        pathIE = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        checkBoxId = new javax.swing.JCheckBox();
        checkBoxInvis = new javax.swing.JCheckBox();
        dispoptsLabel = new javax.swing.JLabel();
        defurlLabel = new javax.swing.JLabel();
        defaultURL = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        descLabel = new javax.swing.JLabel();
        copyrightLabel = new javax.swing.JLabel();
        linkLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Wisard");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(icon.getImage());

        jTabbedPane1.setMinimumSize(new java.awt.Dimension(300, 300));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(300, 300));

        jPanel3.setPreferredSize(new java.awt.Dimension(300, 300));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 300));

        elementsTable.setModel(jTable1Model);
        elementsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(elementsTable);
        elementsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        urlLabel.setText("URL");
        jToolBar1.add(urlLabel);

        urlTextField.setColumns(15);
        urlTextField.setText("URL");
        urlTextField.setToolTipText("Website URL");
        urlTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        urlTextField.setMinimumSize(new java.awt.Dimension(6, 15));
        urlTextField.setPreferredSize(new java.awt.Dimension(12, 20));
        urlTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                urlTextFieldActionPerformed(evt);
            }
        });
        jToolBar1.add(urlTextField);
        urlTextField.getAccessibleContext().setAccessibleName("URL");

        inspectButton.setText("Inspect");
        inspectButton.setToolTipText("Open the URL");
        inspectButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        inspectButton.setFocusable(false);
        inspectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        inspectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        inspectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inspectButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(inspectButton);

        refreshButton.setText("Refresh");
        refreshButton.setToolTipText("Refresh the page elements list");
        refreshButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        refreshButton.setFocusable(false);
        refreshButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        refreshButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(refreshButton);

        jPanel3.add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jTabbedPane1.addTab("Elements", jPanel3);

        codeTextArea.setEditable(false);
        codeTextArea.setColumns(20);
        codeTextArea.setRows(5);
        codeTextArea.setTabSize(4);
        jScrollPane2.setViewportView(codeTextArea);

        jTabbedPane1.addTab("Generated Code", jScrollPane2);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        driverLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        driverLabel.setText("Target Browser and driver");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 20);
        jPanel1.add(driverLabel, gridBagConstraints);

        builtinLabel.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        builtinLabel.setText("built in");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        jPanel1.add(builtinLabel, gridBagConstraints);

        buttonGroup1.add(buttonFF);
        buttonFF.setText("Firefox");
        buttonFF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel1.add(buttonFF, gridBagConstraints);

        buttonGroup1.add(buttonCR);
        buttonCR.setText("Chrome");
        buttonCR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCRActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(buttonCR, gridBagConstraints);

        buttonGroup1.add(buttonIE);
        buttonIE.setText("Internet Explorer");
        buttonIE.setToolTipText("Internet Explorer");
        buttonIE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonIEActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(buttonIE, gridBagConstraints);
        buttonIE.getAccessibleContext().setAccessibleDescription("IE");

        pathCR.setText("pathCR");
        pathCR.setToolTipText("Path to Chrome driver");
        pathCR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathCRActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(pathCR, gridBagConstraints);
        pathCR.getAccessibleContext().setAccessibleName("Crome driver");

        pathIE.setText("pathIE");
        pathIE.setToolTipText("Path to IE driver");
        pathIE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathIEActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(pathIE, gridBagConstraints);
        pathIE.getAccessibleContext().setAccessibleName("IE driver");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        jPanel1.add(saveButton, gridBagConstraints);

        checkBoxId.setText("Show Element 'id'");
        checkBoxId.setToolTipText("Show Element 'id'");
        checkBoxId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxIdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel1.add(checkBoxId, gridBagConstraints);
        checkBoxId.getAccessibleContext().setAccessibleDescription("Show id");

        checkBoxInvis.setText("List invisible Elements");
        checkBoxInvis.setToolTipText("List invisible Elements");
        checkBoxInvis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxInvisActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel1.add(checkBoxInvis, gridBagConstraints);
        checkBoxInvis.getAccessibleContext().setAccessibleDescription("List Invisible");

        dispoptsLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        dispoptsLabel.setText("Display Options");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        jPanel1.add(dispoptsLabel, gridBagConstraints);

        defurlLabel.setText("Default URL");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel1.add(defurlLabel, gridBagConstraints);

        defaultURL.setText("defaultURL");
        defaultURL.setToolTipText("Default URL");
        defaultURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultURLActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(defaultURL, gridBagConstraints);
        defaultURL.getAccessibleContext().setAccessibleName("Default URL");

        jTabbedPane1.addTab("Settings", jPanel1);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        nameLabel.setFont(new java.awt.Font("Tahoma", 0, 72)); // NOI18N
        nameLabel.setText("Wisard");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel2.add(nameLabel, gridBagConstraints);

        descLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        descLabel.setText("Web Internal Structure Action RecorDer");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel2.add(descLabel, gridBagConstraints);

        copyrightLabel.setText("© Steve Mellor 2014");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel2.add(copyrightLabel, gridBagConstraints);

        linkLabel.setText("<html> <a href=\"https://github.com/testingsteve/wisard\">Wisard on github</a></html>");
        linkLabel.setToolTipText("");
        linkLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                linkLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                linkLabelMouseEntered(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        jPanel2.add(linkLabel, gridBagConstraints);

        jTabbedPane1.addTab("About", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void urlTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_urlTextFieldActionPerformed
        inspectButton.doClick();
    }//GEN-LAST:event_urlTextFieldActionPerformed

    private void buttonFFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFFActionPerformed
        prefs.put("browser", "FF");
    }//GEN-LAST:event_buttonFFActionPerformed

    private void buttonCRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCRActionPerformed
        prefs.put("browser", "CR");
    }//GEN-LAST:event_buttonCRActionPerformed

    private void buttonIEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonIEActionPerformed
        prefs.put("browser", "IE");
    }//GEN-LAST:event_buttonIEActionPerformed

    private void pathCRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathCRActionPerformed
        prefs.put("driverCR", pathCR.getText());
    }//GEN-LAST:event_pathCRActionPerformed

    private void pathIEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathIEActionPerformed
        prefs.put("driverIE", pathIE.getText());
    }//GEN-LAST:event_pathIEActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        prefs.put("driverCR", pathCR.getText());
        prefs.put("driverIE", pathIE.getText());
        prefs.put("defaultURL", defaultURL.getText());
        urlTextField.setText(defaultURL.getText());
    }//GEN-LAST:event_saveButtonActionPerformed

    private void checkBoxIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxIdActionPerformed
        if (prefs.getBoolean("showId", false)) {
            prefs.putBoolean("showId", false);
            //hide id column
            elementsTable.removeColumn(elementsTable.getColumn("id"));

        } else {
            prefs.putBoolean("showId", true);
            //reset table to show id
            jTable1Model.fireTableStructureChanged();
            //re-hide webElements
            elementsTable.removeColumn(elementsTable.getColumn("webElement"));
        }
    }//GEN-LAST:event_checkBoxIdActionPerformed

    private void checkBoxInvisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxInvisActionPerformed
        if (prefs.getBoolean("showInvis", false)) {
            prefs.putBoolean("showInvis", false);
        } else {
            prefs.putBoolean("showInvis", true);
        }
    }//GEN-LAST:event_checkBoxInvisActionPerformed

    private void defaultURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultURLActionPerformed
        prefs.put("defaultURL", defaultURL.getText());
        urlTextField.setText(defaultURL.getText());
    }//GEN-LAST:event_defaultURLActionPerformed

    private void inspectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inspectButtonActionPerformed
        // TODO add your handling code here:
        //System.out.println(evt.getActionCommand());
        if (inspectButton.isSelected()) {
            urlTextField.setEnabled(false);
            Boolean success = false;
            if (prefs.get("browser", "").contentEquals("FF")) {
                success = bd.initFF(urlTextField.getText());
            }
            if (prefs.get("browser", "").contentEquals("CR")) {
                success = bd.initCR(urlTextField.getText(), prefs.get("driverCR", ""));
            }
            if (prefs.get("browser", "").contentEquals("IE")) {
                success = bd.initIE(urlTextField.getText(), prefs.get("driverIE", ""));
            }

            if (success) {
                Thread t = new Thread(bd, "Page Examiner");
                t.start();
            } else {
                urlTextField.setEnabled(true);
                inspectButton.doClick();
                bd.close();
            }

        } else {
            urlTextField.setEnabled(true);
            //tidy up
            popup.setVisible(false);
            for (int i = jTable1Model.getRowCount(); i > 0; i--) {
                jTable1Model.removeRow(i - 1);
            }
            bd.close();
        }
    }//GEN-LAST:event_inspectButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        rescan();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void linkLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linkLabelMouseClicked
        // TODO add your handling code here:
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI("https://github.com/testingsteve/wisard"));
            } catch (URISyntaxException | IOException | UnsupportedOperationException ex) {
                this.errorMessage("Unable to open browser, please visit:\n https://github.com/testingsteve/wisard");
            }
        } else {
            this.errorMessage("Unable to open browser, please visit:\n https://github.com/testingsteve/wisard");
        }
    }//GEN-LAST:event_linkLabelMouseClicked

    private void linkLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linkLabelMouseEntered
        // TODO add your handling code here:
        linkLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_linkLabelMouseEntered

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">

        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Wisard().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel builtinLabel;
    private javax.swing.JRadioButton buttonCR;
    private javax.swing.JRadioButton buttonFF;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton buttonIE;
    private javax.swing.JCheckBox checkBoxId;
    private javax.swing.JCheckBox checkBoxInvis;
    private javax.swing.JTextArea codeTextArea;
    private javax.swing.JLabel copyrightLabel;
    private javax.swing.JTextField defaultURL;
    private javax.swing.JLabel defurlLabel;
    private javax.swing.JLabel descLabel;
    private javax.swing.JLabel dispoptsLabel;
    private javax.swing.JLabel driverLabel;
    private javax.swing.JTable elementsTable;
    private javax.swing.JToggleButton inspectButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel linkLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField pathCR;
    private javax.swing.JTextField pathIE;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel urlLabel;
    private javax.swing.JTextField urlTextField;
    // End of variables declaration//GEN-END:variables

    private void exitProcedure() {
        bd.close();
        this.dispose();
        System.exit(0);
    }

    @Override
    public void addItem(String element, String location, String name, String id, String value, Object webElement, Boolean displayed) {
        //adds content to the elements table
        if ((!displayed) && (prefs.getBoolean("showInvis", false))) {
            location = location + Const.INVISIBLE;
            Object item = new Object[]{element, location, name, id, value, webElement};
            jTable1Model.addRow((Object[]) item);
        } else if (displayed) {
            Object item = new Object[]{element, location, name, id, value, webElement};
            jTable1Model.addRow((Object[]) item);
        }
    }

    @Override
    public void rescan() {
        //triggers rescan of the page

        //tidy up first
        popup.setVisible(false);
        for (int i = jTable1Model.getRowCount(); i > 0; i--) {
            jTable1Model.removeRow(i - 1);
        }

        //off we go
        Thread t = new Thread(bd, "Page Examiner");
        t.start();
    }

    @Override
    public void abort() {
        //triggers a UI cleanup
        this.errorMessage("Unexpected error!");
        inspectButton.doClick();
    }

    @Override
    public void addCode(String fragment) {
        //adds content to the generated code
        codeTextArea.setText(fragment);
    }

    @Override
    public void insertCode(String fragment, int above) {
        //inserts content to the generated code
        int point;
        try {
            point = codeTextArea.getLineEndOffset(codeTextArea.getLineCount() - above);
        } catch (BadLocationException e) {
            point = 1;
            //it'll be messy
        }
        codeTextArea.insert(fragment, point - 1);

    }

    @Override
    public boolean alertResponse(String title) {
        int ok = JOptionPane.showConfirmDialog(new JFrame(), title, "Alert box opened by browser", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (ok == 0) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public String enterValue(String title) {
        return (String) JOptionPane.showInputDialog(new JFrame(), title, "Enter Value", JOptionPane.QUESTION_MESSAGE);
    }

    @Override
    public String enterSelection(String title, String choices[]) {
        return (String) JOptionPane.showInputDialog(new JFrame(), title, "Make Selection", JOptionPane.QUESTION_MESSAGE, null, choices, choices[0]);
    }

    @Override
    public void elementIdent(String text) {
        if (text.length() > Const.MAX_SIZ) {
            //crop the text
            text = text.substring(0, Const.MAX_SIZ);
        }
        JOptionPane.showMessageDialog(new JFrame(), text, "Element Highlighted in Browser", JOptionPane.PLAIN_MESSAGE);
    }

    @Override
    public void errorMessage(String message) {
        if (message.length() > Const.MAX_SIZ) {
            //crop the text
            message = message.substring(0, Const.MAX_SIZ);
        }
        JOptionPane.showMessageDialog(new JFrame(), message, "Error", JOptionPane.INFORMATION_MESSAGE);
    }
}
